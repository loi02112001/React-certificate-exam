{"version":3,"file":"static/js/95.6e377182.chunk.js","mappings":"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","sources":["components/FilterQuestion.js","components/QuestionForm.js","containers/QuizMaker.js","redux/selectors/QuestionSelector.js"],"sourcesContent":["import React from \"react\";\r\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { DIFFICULTY_SELECT_LIST } from \"../utils/Constant\";\r\n\r\nconst FilterQuestion = ({\r\n  categories,\r\n  isSubmitting,\r\n  onSubmit,\r\n}) => {\r\n  const initForm = {\r\n    categoryId: \"\",\r\n    difficulty: \"\",\r\n  };\r\n\r\n  const validationForm = Yup.object({\r\n    categoryId: Yup.number().required(\"Required\"),\r\n    difficulty: Yup.string().required(\"Required\"),\r\n  });\r\n\r\n  const handleSubmitForm = async (values) => {\r\n    await onSubmit({\r\n      categoryId: values.categoryId,\r\n      difficulty: values.difficulty,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initForm}\r\n      validationSchema={validationForm}\r\n      onSubmit={handleSubmitForm}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        touched,\r\n        values,\r\n      }) => (\r\n        <>\r\n          <Form onSubmit={handleSubmit}>\r\n            <Row>\r\n              <Col md={5}>\r\n                <Form.Group>\r\n                  <Form.Control\r\n                    size=\"md\"\r\n                    as=\"select\"\r\n                    id=\"categorySelect\"\r\n                    name=\"categoryId\"\r\n                    value={values.categoryId}\r\n                    isInvalid={Boolean(touched.categoryId && errors.categoryId)}\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option disabled value=\"\">\r\n                      Select a category\r\n                    </option>\r\n                    {categories.map((category) => (\r\n                      <option key={category.id} value={category.id}>\r\n                        {category.name}\r\n                      </option>\r\n                    ))}\r\n                  </Form.Control>\r\n                  {!!touched.categoryId && (\r\n                    <>\r\n                      <Form.Control.Feedback type=\"invalid\">\r\n                        {errors.categoryId}\r\n                      </Form.Control.Feedback>\r\n                    </>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md={5}>\r\n                <Form.Group>\r\n                  <Form.Control\r\n                    size=\"md\"\r\n                    as=\"select\"\r\n                    id=\"difficultySelect\"\r\n                    name=\"difficulty\"\r\n                    value={values.difficulty}\r\n                    isInvalid={Boolean(touched.difficulty && errors.difficulty)}\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option disabled value=\"\">\r\n                      Select difficulty\r\n                    </option>\r\n                    {DIFFICULTY_SELECT_LIST.map((difficulty, index) => (\r\n                      <option key={index} value={difficulty.value}>\r\n                        {difficulty.option}\r\n                      </option>\r\n                    ))}\r\n                  </Form.Control>\r\n                  {!!touched.difficulty && (\r\n                    <>\r\n                      <Form.Control.Feedback type=\"invalid\">\r\n                        {errors.difficulty}\r\n                      </Form.Control.Feedback>\r\n                    </>\r\n                  )}\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md={2}>\r\n                <Button\r\n                  id=\"createBtn\"\r\n                  type=\"submit\"\r\n                  variant=\"primary\"\r\n                  size=\"md\"\r\n                  disabled={isSubmitting}\r\n                >\r\n                  Create\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FilterQuestion;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst QuestionForm = ({\r\n  questions,\r\n  choosedAnswers,\r\n  onChooseAnswer,\r\n  onSubmit,\r\n}) => {\r\n  return (\r\n    <>\r\n      {questions.map((question, index) => (\r\n        <QuestionItem\r\n          key={index}\r\n          question={question.question}\r\n          answers={question.answers}\r\n          choosedAnswer={\r\n            choosedAnswers.find((item) => item.question === question.question)\r\n              ?.answer\r\n          }\r\n          onChooseAnswer={onChooseAnswer}\r\n        />\r\n      ))}\r\n      {questions.length !== 0 && questions.length === choosedAnswers.length && (\r\n        <div className=\"mt-3 d-grid gap-2\">\r\n          <Button onClick={onSubmit}>Submit</Button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst QuestionItem = ({ question, answers, choosedAnswer, onChooseAnswer }) => {\r\n  return (\r\n    <>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n      {answers.map((answer, index) => (\r\n        <Button\r\n          key={index}\r\n          className=\"me-2 mb-4\"\r\n          variant={\r\n            choosedAnswer !== undefined && choosedAnswer === answer\r\n              ? \"primary\"\r\n              : \"outline-primary\"\r\n          }\r\n          onClick={() => onChooseAnswer({ question, answer })}\r\n        >\r\n          <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n        </Button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionForm;\r\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  resetQuestionAction,\r\n  getListQuestionAction,\r\n  chooseAnswerAction,\r\n} from \"../redux/reducers/QuestionSlide\";\r\nimport {\r\n  selectLoading,\r\n  selectListQuestions,\r\n  selectListChoosedAnswers,\r\n} from \"../redux/selectors/QuestionSelector\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport CategoryApi from \"../api/CategoryApi\";\r\nimport FilterCategoryAndDifficultyForm from \"../components/FilterQuestion\";\r\nimport QuestionForm from \"../components/QuestionForm\";\r\n\r\nconst QuizMakerPage = ({\r\n  isQuestionLoading,\r\n  questions,\r\n  choosedAnswers,\r\n  resetQuestionAction,\r\n  getListQuestionAction,\r\n  chooseAnswerAction,\r\n}) => {\r\n  const navigate = useNavigate();\r\n\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getAllCategories = async () => {\r\n      const data = await CategoryApi.getAllCategories();\r\n      setCategories(data.trivia_categories);\r\n    };\r\n    resetQuestionAction();\r\n    getAllCategories();\r\n  }, [resetQuestionAction]);\r\n\r\n  const redirectToQuizResultPage = useCallback(() => {\r\n    navigate(\"/results\");\r\n  }, [navigate]);\r\n\r\n  const FilterCategoryAndDifficultyFormMemo = useMemo(\r\n    () => (\r\n      <FilterCategoryAndDifficultyForm\r\n        categories={categories}\r\n        isSubmitting={isQuestionLoading}\r\n        onSubmit={getListQuestionAction}\r\n      />\r\n    ),\r\n    [categories, isQuestionLoading, getListQuestionAction]\r\n  );\r\n\r\n  const QuestionFormMemo = useMemo(\r\n    () => (\r\n      <QuestionForm\r\n        questions={questions}\r\n        choosedAnswers={choosedAnswers}\r\n        onChooseAnswer={chooseAnswerAction}\r\n        onSubmit={redirectToQuizResultPage}\r\n      />\r\n    ),\r\n    [questions, choosedAnswers, chooseAnswerAction, redirectToQuizResultPage]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Container fluid className=\"p-0\">\r\n        <h2 className=\"text-center\">QUIZ MAKER</h2>\r\n        <div className=\"mt-3\">{FilterCategoryAndDifficultyFormMemo}</div>\r\n        {questions.length !== 0 && (\r\n          <div className=\"mt-3 d-flex justify-content-center\">\r\n            <div>{QuestionFormMemo}</div>\r\n          </div>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => {\r\n    return {\r\n      isQuestionLoading: selectLoading(state),\r\n      questions: selectListQuestions(state),\r\n      choosedAnswers: selectListChoosedAnswers(state),\r\n    };\r\n  },\r\n  { resetQuestionAction, getListQuestionAction, chooseAnswerAction }\r\n)(QuizMakerPage);\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst selectListQuestionSelector = createSelector(\r\n  (state) => state.question,\r\n  (state) => state.questions\r\n);\r\n\r\nconst selectLoadingSelector = createSelector(\r\n  (state) => state.question,\r\n  (state) => state.isLoading\r\n);\r\n\r\nconst selectListChoosedAnswerSelector = createSelector(\r\n  (state) => state.question,\r\n  (state) => state.choosedAnswers\r\n);\r\n\r\nexport const selectListQuestions = (state) => {\r\n  return selectListQuestionSelector(state);\r\n};\r\n\r\nexport const selectLoading = (state) => {\r\n  return selectLoadingSelector(state);\r\n};\r\n\r\nexport const selectListChoosedAnswers = (state) => {\r\n  return selectListChoosedAnswerSelector(state);\r\n};\r\n"],"names":["_ref","categories","isSubmitting","onSubmit","validationForm","Yup","categoryId","required","difficulty","_jsx","Formik","initialValues","validationSchema","async","values","children","_ref2","errors","handleBlur","handleChange","handleSubmit","touched","_Fragment","Form","_jsxs","Row","Col","md","Group","Control","size","as","id","name","value","isInvalid","Boolean","onBlur","onChange","disabled","map","category","Feedback","type","DIFFICULTY_SELECT_LIST","index","option","Button","variant","QuestionItem","question","answers","choosedAnswer","onChooseAnswer","dangerouslySetInnerHTML","__html","answer","className","undefined","onClick","questions","choosedAnswers","_choosedAnswers$find","find","item","length","connect","state","isQuestionLoading","selectLoading","selectListQuestions","selectListChoosedAnswers","resetQuestionAction","getListQuestionAction","chooseAnswerAction","navigate","useNavigate","setCategories","useState","useEffect","data","CategoryApi","getAllCategories","trivia_categories","redirectToQuizResultPage","useCallback","FilterCategoryAndDifficultyFormMemo","useMemo","FilterCategoryAndDifficultyForm","QuestionFormMemo","QuestionForm","Container","fluid","selectListQuestionSelector","createSelector","selectLoadingSelector","isLoading","selectListChoosedAnswerSelector"],"sourceRoot":""}